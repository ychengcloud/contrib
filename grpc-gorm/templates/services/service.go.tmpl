{{ $g := .Generator }}

{{ $g.Template "import/header.tmpl" $g.Cfg.Header }}
package services

import (
	"context"
	"encoding/json"

	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	"gorm.io/gorm"

	pb "{{ $g.Cfg.Attrs.protoPkg }}/gen/go/{{ .Project }}/v1"
	"{{ .Package }}/models"
	"{{ .Package }}/repositories"
)

{{- $svc := .Project | title}}
{{- $table := .}}
{{- $id := .ID}}

func (s *{{ $svc }}Service) list{{ $table.Name | pascal | plural }}(ctx context.Context, parent string, req *pb.List{{ $table.Name | pascal | plural }}Request) (*pb.List{{ $table.Name | pascal | plural }}Response, error) {
	if req == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{ $id.Name | camel }} is not provided")
	}

	var (
		withEdges bool
		filter *models.{{ $table.Name | pascal }}FilterInput
	)

	if len(req.Filter) > 0 {
		f := models.{{ $table.Name | pascal }}FilterInput{}
		err := json.Unmarshal([]byte(req.Filter), &f)
		if err != nil {
			return nil, status.Errorf(codes.InvalidArgument, "invalid argument: filter parse fail: %v", err)
		}
		filter = &f
	}

	switch req.GetView() {
	case pb.List{{ $table.Name | pascal | plural }}Request_VIEW_UNSPECIFIED, pb.List{{ $table.Name | pascal | plural }}Request_BASIC:
	case pb.List{{ $table.Name | pascal | plural }}Request_WITH_EDGES:
		withEdges = true
	default:
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: unknown view")
	}

    {{ $table.Name | camel | plural }}, nextPageToken, totalCount, err := s.repo.List{{ $table.Name | pascal | plural }}(ctx, parent, req.Parent, filter, req.OrderBy, req.PageSize, req.PageToken, withEdges)

	if err != nil {
		return nil, err
	}

	pb{{ $table.Name | pascal | plural }} := make([]*pb.{{ $table.Name | pascal }}, 0, len({{ $table.Name | camel | plural }}))
	for _, {{ $table.Name | camel  }} := range {{ $table.Name | camel | plural }} {
		pb{{ $table.Name | pascal | plural }} = append(pb{{ $table.Name | pascal | plural }}, {{ $table.Name | camel  }}.ToPB())
	}

	var resp pb.List{{ $table.Name | pascal | plural }}Response
	resp.{{ $table.Name | pascal | plural }} = pb{{ $table.Name | pascal | plural }}
	resp.NextPageToken = nextPageToken
	resp.TotalCount = int32(totalCount)

	return &resp, nil
}

func (s *{{ $svc }}Service) List{{ $table.Name | pascal | plural }}(ctx context.Context, req *pb.List{{ $table.Name | pascal | plural }}Request) (*pb.List{{ $table.Name | pascal | plural }}Response, error) {
	return s.list{{ $table.Name | pascal | plural }}(ctx, "", req)
}

{{- range $f := .Fields}}
    {{- if or $f.RelBelongsTo $f.RelManyToMany }}
		func (s *{{ $svc }}Service) List{{ $table.Name | pascal | plural }}With{{ .Name | pascal }}(ctx context.Context, req *pb.List{{ $table.Name | pascal | plural }}Request) (*pb.List{{ $table.Name | pascal | plural }}Response, error) {
			return s.list{{ $table.Name | pascal | plural }}(ctx, "{{ .Name | camel | plural }}", req)
		}
	{{- end}}
{{- end}}

func (s *{{ $svc }}Service) Create{{ $table.Name | pascal }}(ctx context.Context, req *pb.Create{{ $table.Name | pascal }}Request) (*pb.{{ $table.Name | pascal }}, error) {
	if req == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$id.Name | camel }} is not provided")
	}

	{{ $table.Name | camel  }} := &models.{{ $table.Name | pascal }}{}
	{{ $table.Name | camel  }} = models.{{ .Name | pascal }}ToDB(req.Get{{ $table.Name | pascal }}())

	{{ $table.Name | camel  }}, err := s.repo.Create{{ $table.Name | pascal }}(ctx, {{ $table.Name | camel  }})

	if err != nil {
		return nil, err
	}

	return {{ $table.Name | camel  }}.ToPB(), nil
}

func (s *{{ $svc }}Service) BatchCreate{{ $table.Name | pascal }}(ctx context.Context, req *pb.BatchCreate{{ $table.Name | pascal }}Request) (*pb.Batch{{ $table.Name | pascal }}Response, error) {
	if req == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$id.Name | camel }} is not provided")
	}

	{{ $table.Name | camel | plural }} := make([]*models.{{ $table.Name | pascal }}, len(req.Get{{ $table.Name | pascal | plural }}()))
	for i, item := range req.{{ $table.Name | pascal | plural }} {
		{{ $table.Name | camel | plural }}[i] = models.{{ .Name | pascal }}ToDB(item)
	}

	{{ $table.Name | camel | plural }}, err := s.repo.BatchCreate{{ $table.Name | pascal }}(ctx, {{ $table.Name | camel | plural }})

	if err != nil {
		return nil, err
	}

	pb{{ $table.Name | pascal | plural }} := make([]*pb.{{ $table.Name | pascal }}, len({{ $table.Name | camel | plural }}))
	for i, {{ $table.Name | camel  }} := range {{ $table.Name | camel | plural }} {
		pb{{ $table.Name | pascal | plural }}[i] = {{ $table.Name | camel  }}.ToPB()
	}

	var resp pb.Batch{{ $table.Name | pascal }}Response
	resp.{{ $table.Name | pascal | plural }} = pb{{ $table.Name | pascal | plural }}

	return &resp, nil
}

{{- range $f := .Fields}}
    {{- if not $f.Remote }}
		{{- if $f.Filterable }}
			func (s *{{ $svc }}Service) Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}(ctx context.Context, req *pb.Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request) (*pb.{{ $table.Name | pascal }}, error) {
				var (
					withEdges bool
				)

				if req == nil {
					return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{ $f.Name | camel  }} is not provided")
				}

				switch req.GetView() {
				case pb.Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request_VIEW_UNSPECIFIED, pb.Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request_BASIC:
				case pb.Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request_WITH_EDGES:
					withEdges = true
				default:
					return nil, status.Errorf(codes.InvalidArgument, "invalid argument: unknown view")
				}

				{{ $table.Name | camel  }}, err := s.repo.Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}(ctx, req.{{ $f.Name | pascal }}, withEdges)
				if err != nil {
					return nil, err
				}
				return {{ $table.Name | camel  }}.ToPB(), nil
			}
			func (s *{{ $svc }}Service) BatchGet{{ $table.Name | pascal }}By{{ $f.Name | pascal }}(ctx context.Context, req *pb.BatchGet{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request) (*pb.Batch{{ $table.Name | pascal }}Response, error) {
				var (
					withEdges bool
				)

				if req == nil || len(req.{{ $f.Name | pascal | plural }}) == 0 {
					return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{ $f.Name | camel  }} is not provided")
				}

				switch req.GetView() {
				case pb.BatchGet{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request_VIEW_UNSPECIFIED, pb.BatchGet{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request_BASIC:
				case pb.BatchGet{{ $table.Name | pascal }}By{{ $f.Name | pascal }}Request_WITH_EDGES:
					withEdges = true
				default:
					return nil, status.Errorf(codes.InvalidArgument, "invalid argument: unknown view")
				}

				{{ $table.Name | camel | plural }}, err := s.repo.BatchGet{{ $table.Name | pascal }}By{{ $f.Name | pascal }}(ctx, req.{{ $f.Name | pascal | plural }}, withEdges)
				if err != nil {
					return nil, err
				}

				pb{{ $table.Name | pascal | plural }} := make([]*pb.{{ $table.Name | pascal }}, len({{ $table.Name | camel | plural }}))
				for i, {{ $table.Name | camel  }} := range {{ $table.Name | camel | plural }} {
					pb{{ $table.Name | pascal | plural }}[i] = {{ $table.Name | camel  }}.ToPB()
				}

				var resp pb.Batch{{ $table.Name | pascal }}Response
				resp.{{ $table.Name | pascal | plural }} = pb{{ $table.Name | pascal | plural }}

				return &resp, nil
			}
		{{- end}}
	{{- end}}
{{- end}}

func (s *{{ $svc }}Service) Update{{ $table.Name | pascal }}(ctx context.Context, req *pb.Update{{ $table.Name | pascal }}Request) (*pb.{{ $table.Name | pascal }}, error) {

	if req == nil || req.{{ $table.Name | pascal }} == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$id.Name | camel }} is not provided")
	}

	{{ $table.Name | camel  }} := &models.{{ $table.Name | pascal }}{}
	{{ $table.Name | camel  }} = models.{{ $table.Name | pascal }}ToDB(req.Get{{ $table.Name | pascal }}())

	mask := req.GetUpdateMask()
	var updateMask []string
	if mask != nil {
		CamelCaseFieldMask(mask)
		updateMask = mask.GetPaths()
	}

	{{ $table.Name | camel  }}, err := s.repo.Update{{ $table.Name | pascal }}(ctx, {{ $table.Name | camel  }}, updateMask)
	if err != nil {
		return nil, err
	}
	return {{ $table.Name | camel  }}.ToPB(), nil
}

func (s *{{ $svc }}Service) BatchUpdate{{ $table.Name | pascal }}(ctx context.Context, req *pb.BatchUpdate{{ $table.Name | pascal }}Request) (*pb.Batch{{ $table.Name | pascal }}Response, error) {
	if req == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$id.Name | camel }} is not provided")
	}

	{{ $table.Name | camel | plural }} := make([]*models.{{ $table.Name | pascal }}, len(req.Get{{ $table.Name | pascal | plural }}()))
	for i, item := range req.{{ $table.Name | pascal | plural }} {
		{{ $table.Name | camel | plural }}[i] = models.{{ .Name | pascal }}ToDB(item)
	}

	mask := req.GetUpdateMask()
	var updateMask []string
	if mask != nil {
		CamelCaseFieldMask(mask)
		updateMask = mask.GetPaths()
	}

	{{ $table.Name | camel | plural }}, err := s.repo.BatchUpdate{{ $table.Name | pascal }}(ctx, {{ $table.Name | camel | plural }}, updateMask)

	if err != nil {
		return nil, err
	}

	pb{{ $table.Name | pascal | plural }} := make([]*pb.{{ $table.Name | pascal }}, len({{ $table.Name | camel | plural }}))
	for i, {{ $table.Name | camel  }} := range {{ $table.Name | camel | plural }} {
		pb{{ $table.Name | pascal | plural }}[i] = {{ $table.Name | camel  }}.ToPB()
	}

	var resp pb.Batch{{ $table.Name | pascal }}Response
	resp.{{ $table.Name | pascal | plural }} = pb{{ $table.Name | pascal | plural }}

	return &resp, nil
}

func (s *{{ $svc }}Service) Delete{{ $table.Name | pascal }}(ctx context.Context, req *pb.Delete{{ $table.Name | pascal }}Request) (*emptypb.Empty, error) {

	if req == nil {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$id.Name | camel }} is not provided")
	}

	err := s.repo.Delete{{ $table.Name | pascal }}(ctx, req.{{ $id.Name | pascal }})
	if err != nil {
		return nil, err
	}
	return &emptypb.Empty{}, nil
}

func (s *{{ $svc }}Service) BatchDelete{{ $table.Name | pascal }}(ctx context.Context, req *pb.BatchDelete{{ $table.Name | pascal }}Request) (*emptypb.Empty, error) {

	if req == nil || len(req.{{$id.Name | pascal | plural}}) == 0 {
		return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{$id.Name | camel }} is not provided")
	}

	err := s.repo.BatchDelete{{ $table.Name | pascal }}(ctx, req.{{ $id.Name | pascal | plural }})
	if err != nil {
		return nil, err
	}
	return &emptypb.Empty{}, nil
}

{{- range $f := .Fields}}
	{{- if .RelManyToMany }}
		func (s *{{ $svc }}Service) {{ $table.Name | pascal | plural }}AssignWith{{ $f.Name | pascal | plural }}(ctx context.Context, req *pb.{{ $table.Name | pascal | plural }}AssignWith{{ $f.Name | pascal | plural }}Request) (*emptypb.Empty, error) {

			if req == nil {
				return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{ $f.Rel.JoinTable.JoinField.Name | pascal }} is not provided")
			}

			err := s.repo.{{ $table.Name | pascal | plural }}AssignWith{{ $f.Name | pascal | plural }}(ctx, req.{{ $f.Rel.JoinTable.JoinField.Name | pascal }}, req.{{ $f.Rel.JoinTable.JoinRefField.Name | pascal | plural }})
			if err != nil {
				return nil, err
			}
			return &emptypb.Empty{}, nil
		}

		func (s *{{ $svc }}Service) {{ $table.Name | pascal | plural }}UnassignWith{{ $f.Name | pascal | plural }}(ctx context.Context, req *pb.{{ $table.Name | pascal | plural }}UnassignWith{{ $f.Name | pascal | plural }}Request) (*emptypb.Empty, error) {

			if req == nil {
				return nil, status.Errorf(codes.InvalidArgument, "invalid argument: {{ $f.Rel.JoinTable.JoinField.Name | pascal }} is not provided")
			}

			err := s.repo.{{ $table.Name | pascal | plural }}UnassignWith{{ $f.Name | pascal | plural }}(ctx, req.{{ $f.Rel.JoinTable.JoinField.Name | pascal }}, req.{{ $f.Rel.JoinTable.JoinRefField.Name | pascal | plural }})
			if err != nil {
				return nil, err
			}
			return &emptypb.Empty{}, nil
		}
	{{- end}}
{{- end}}
