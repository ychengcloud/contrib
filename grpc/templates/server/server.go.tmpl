package server

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"
	"os/signal"
	"syscall"

	"github.com/go-playground/validator"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/prometheus/client_golang/prometheus/promhttp"
	"github.com/uber/jaeger-client-go"
	jagercfg "github.com/uber/jaeger-client-go/config"
	"go.uber.org/zap"
	"google.golang.org/grpc/health"
	healthpb "google.golang.org/grpc/health/grpc_health_v1"

	"{{ .Package }}/config"
	"{{ .Package }}/services"
	pb "{{ .Package }}/gen/proto/go/{{ .Project | snake }}/v1"
)

type server struct {
	cfg *config.Config
	log *zap.Logger
	v   *validator.Validate
	{{ .Project | camel }}SvcServer pb.{{ .Project | pascal }}ServiceServer
}

func NewServer(log *zap.Logger, cfg *config.Config, {{ .Project | camel }}SvcServer pb.{{ .Project | pascal }}ServiceServer) *server {
	return &server{log: log, cfg: cfg, v: validator.New(), {{ .Project | camel }}SvcServer: {{ .Project | camel }}SvcServer}
}

func (s *server) Run() error {
	ctx, cancel := signal.NotifyContext(context.Background(), os.Interrupt, syscall.SIGTERM, syscall.SIGINT)
	defer cancel()

	if s.cfg.PrometheusConfig.Enable {
		s.runPrometheusServer(cancel)
	}

	if s.cfg.TracingConfig.Enable {
		jaegerCfg := &s.cfg.TracingConfig.JaegerConfig
		tracer, closer, err := jaegerCfg.NewTracer(jagercfg.Logger(jaeger.StdLogger))
		if err != nil {
			return err
		}
		defer closer.Close() // nolint: errcheck
		opentracing.SetGlobalTracer(tracer)
	}

	closeGrpcServer, grpcServer, err := s.newGrpcServer()
	if err != nil {
		return err
	}
	defer closeGrpcServer() // nolint: errcheck
	pb.Register{{ .Project | pascal }}ServiceServer(grpcServer, s.{{ .Project | camel }}SvcServer)

	hsrv := health.NewServer()
	hsrv.SetServingStatus("", healthpb.HealthCheckResponse_SERVING)
	healthpb.RegisterHealthServer(grpcServer, hsrv)

	<-ctx.Done()
	grpcServer.GracefulStop()
	return nil
}

func (s *server) runPrometheusServer(cancel context.CancelFunc) {
	go func() {
		prometheusServer := &http.Server{Addr: fmt.Sprintf(":%d", s.cfg.PrometheusConfig.Port)}
		http.Handle("/metrics", promhttp.Handler())
		s.log.Sugar().Infof("Metrics server is running on port: %d", s.cfg.PrometheusConfig.Port)
		if err := prometheusServer.ListenAndServe(); err != nil {
			s.log.Sugar().Errorf("prometheusServer.Start: %v", err)
			cancel()
		}
	}()
}
