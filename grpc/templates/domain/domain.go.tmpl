{{ $g := .Generator }}

{{ $g.Template "import/header.tmpl" $g.Cfg.Header }}
package domain

import (
	"context"
)

type Usecase interface {
{{- range $table := .Tables}}
	List{{ $table.Name | pascal | plural }}(ctx context.Context, {{- if $table.HasParent }}parent string, parentName string,{{- end }} {{- if $table.HasFilterField }}filter *{{ $table.Name | pascal }}FilterInput,{{- end }} orderBy string, pageSize int32, pageToken string, withEdges bool) ({{ $table.Name | camel | plural }} []*{{ $table.Name | pascal}}, nextToken string, err error)

	Create{{ $table.Name | pascal }}(ctx context.Context, {{ $table.Name | camel }} *{{ $table.Name | pascal }}) (*{{ $table.Name | pascal }}, error)

	BatchCreate{{ $table.Name | pascal | plural }}(ctx context.Context, {{ .Name | camel | plural }} []*{{ $table.Name | pascal }}) ([]*{{ $table.Name | pascal }}, error)
	
    {{- range $f := .Fields}}
		{{- if not $f.Remote }}
			{{- if $f.Filterable }}
				Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}(ctx context.Context, {{ $f.Name | camel }} {{ $f.Type.Kind }}, withEdges bool) (*{{ $table.Name | pascal }}, error)

				BatchGet{{ $table.Name | pascal | plural }}By{{ $f.Name| pascal }}(ctx context.Context, {{ $f.Name | camel | plural }} []{{ $f.Type.Kind }}, withEdges bool) ([]*{{ $table.Name | pascal }}, error)

			{{- end}}
		{{- end}}
		{{- if $f.RelManyToMany }}
			{{ $table.Name | pascal | plural }}AssignWith{{ $f.Name | pascal | plural }}(ctx context.Context, {{ $f.Rel.JoinTable.JoinField.Name | camel }} {{ $f.Rel.JoinTable.JoinField.Type.Kind }}, {{ $f.Rel.JoinTable.JoinRefField.Name | camel | plural }} []{{ $f.Rel.JoinTable.JoinRefField.Type.Kind }} )  error

			{{ $table.Name | pascal | plural }}UnassignWith{{ $f.Name | pascal | plural }}(ctx context.Context, {{ $f.Rel.JoinTable.JoinField.Name | camel }} {{ $f.Rel.JoinTable.JoinRefField.Type.Kind }}, {{ $f.Rel.JoinTable.JoinRefField.Name | camel | plural }} []{{ $f.Rel.JoinTable.JoinRefField.Type.Kind}} )  error 
		{{- end}}
	{{- end}}

	Update{{ $table.Name | pascal }}(ctx context.Context, {{ $table.Name | camel }} *{{ $table.Name | pascal }}, updateMask []string) (*{{ $table.Name | pascal }}, error)

	BatchUpdate{{ $table.Name | pascal | plural }}(ctx context.Context, {{ .Name | camel | plural }} []*{{ $table.Name | pascal }}, updateMask []string) ([]*{{ $table.Name | pascal }}, error)

	Delete{{ $table.Name | pascal }}(ctx context.Context, {{ $table.ID.Name | camel }} {{ $table.ID.Type.Kind }}) error

	BatchDelete{{ $table.Name | pascal | plural }}(ctx context.Context, {{ $table.ID.Name | camel | plural }} []{{ $table.ID.Type.Kind }}) error
{{- end}}
}
