{{ $g := .Generator }}

{{ $g.Template "import/header.tmpl" $g.Cfg.Header }}
package usecase

import (
	"context"
	"errors"
	"fmt"

	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"

	"{{ .Package }}/domain"
)


{{- $table := .}}
{{- $id := .ID}}

func (us *Usecase) List{{ $table.Name | pascal | plural }}(ctx context.Context, {{- if $table.HasParent }}parent string, parentName string,{{- end }} {{- if $table.HasFilterField }}filter *domain.{{ $table.Name | pascal }}FilterInput,{{- end }} orderBy string, pageSize int32, pageToken string, withEdges bool) ({{ $table.Name | camel | plural }} []*domain.{{ $table.Name | pascal}}, nextToken string, err error) {
	return us.repo.List{{ $table.Name | pascal | plural }}(ctx, {{- if $table.HasParent }}parent, parentName,{{- end }} {{- if $table.HasFilterField }}filter,{{- end }} orderBy, pageSize, pageToken, withEdges)
}

func (us *Usecase) Create{{ $table.Name | pascal }}(ctx context.Context, {{ $table.Name | camel }} *domain.{{ $table.Name | pascal }}) (*domain.{{ $table.Name | pascal }}, error) {
	return us.repo.Create{{ $table.Name | pascal }}(ctx, {{ $table.Name | camel  }})
}

func (us *Usecase) BatchCreate{{ $table.Name | pascal | plural }}(ctx context.Context, {{ .Name | camel | plural }} []*domain.{{ $table.Name | pascal }}) ([]*domain.{{ $table.Name | pascal }}, error) {
	return us.repo.BatchCreate{{ $table.Name | pascal | plural }}(ctx, {{ $table.Name | camel | plural }})
}

{{- range $f := .Fields}}
    {{- if not $f.Remote }}
		{{- if $f.Filterable }}
			func (us *Usecase) Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}(ctx context.Context, {{ $f.Name | camel }} {{ $f.Type.Kind }}, withEdges bool) (*domain.{{ $table.Name | pascal }}, error) {
				return us.repo.Get{{ $table.Name | pascal }}By{{ $f.Name | pascal }}(ctx, {{ $f.Name | camel }}, withEdges)
			}
			func (us *Usecase) BatchGet{{ $table.Name | pascal | plural }}By{{ $f.Name| pascal }}(ctx context.Context, {{ $f.Name | camel | plural }} []{{ $f.Type.Kind }}, withEdges bool) ([]*domain.{{ $table.Name | pascal }}, error) {
				return us.repo.BatchGet{{ $table.Name | pascal | plural }}By{{ $f.Name | pascal }}(ctx, {{ $f.Name | camel | plural }}, withEdges)
			}
		{{- end}}
	{{- end}}
{{- end}}

func (us *Usecase) Update{{ $table.Name | pascal }}(ctx context.Context, {{ $table.Name | camel }} *domain.{{ $table.Name | pascal }}, updateMask []string) (*domain.{{ $table.Name | pascal }}, error) {
    return us.repo.Update{{ $table.Name | pascal }}(ctx, {{ $table.Name | camel  }}, updateMask)
}

func (us *Usecase) BatchUpdate{{ $table.Name | pascal | plural }}(ctx context.Context, {{ .Name | camel | plural }} []*domain.{{ $table.Name | pascal }}, updateMask []string) ([]*domain.{{ $table.Name | pascal }}, error) {
	return us.repo.BatchUpdate{{ $table.Name | pascal | plural }}(ctx, {{ $table.Name | camel | plural }}, updateMask)
}

func (us *Usecase) Delete{{ $table.Name | pascal }}(ctx context.Context, {{ $table.ID.Name | camel }} {{ $table.ID.Type.Kind }}) error {
    return us.repo.Delete{{ $table.Name | pascal }}(ctx, {{ $table.ID.Name | camel }})
}

func (us *Usecase) BatchDelete{{ $table.Name | pascal | plural }}(ctx context.Context, {{ $table.ID.Name | camel | plural }} []{{ $table.ID.Type.Kind }}) error {
    return us.repo.BatchDelete{{ $table.Name | pascal | plural }}(ctx, {{ $table.ID.Name | camel | plural }})
}

{{- range $f := .Fields}}
	{{- if .RelManyToMany }}
		func (us *Usecase) {{ $table.Name | pascal | plural }}AssignWith{{ $f.Name | pascal | plural }}(ctx context.Context, {{ $f.Rel.JoinTable.JoinField.Name | camel }} {{ $f.Rel.JoinTable.JoinField.Type.Kind }}, {{ $f.Rel.JoinTable.JoinRefField.Name | camel | plural }} []{{ $f.Rel.JoinTable.JoinRefField.Type.Kind }} )  error {
			return us.repo.{{ $table.Name | pascal | plural }}AssignWith{{ $f.Name | pascal | plural }}(ctx, {{ $f.Rel.JoinTable.JoinField.Name | camel }}, {{ $f.Rel.JoinTable.JoinRefField.Name | camel | plural }})
		}

		func (us *Usecase) {{ $table.Name | pascal | plural }}UnassignWith{{ $f.Name | pascal | plural }}(ctx context.Context, {{ $f.Rel.JoinTable.JoinField.Name | camel }} {{ $f.Rel.JoinTable.JoinRefField.Type.Kind }}, {{ $f.Rel.JoinTable.JoinRefField.Name | camel | plural }} []{{ $f.Rel.JoinTable.JoinRefField.Type.Kind}} ) error {
            return us.repo.{{ $table.Name | pascal | plural }}UnassignWith{{ $f.Name | pascal | plural }}(ctx, {{ $f.Rel.JoinTable.JoinField.Name | camel }}, {{ $f.Rel.JoinTable.JoinRefField.Name | camel | plural }})
		}
		{{- if $f.Remote }}
			func (us *Usecase) List{{ $f.Rel.JoinTable.JoinRefField.Name | pascal | plural }}With{{ $f.Rel.JoinTable.JoinField.Name | pascal }}(ctx context.Context, {{ $f.Rel.JoinTable.JoinField.Name | camel }} {{ $f.Rel.JoinTable.JoinField.Type.Kind }}, orderBy string, pageSize int32, pageToken string) ({{ $f.Rel.JoinTable.JoinRefField.Name | camel | plural }} []{{ $f.Rel.JoinTable.JoinRefField.Type.Kind }}, nextToken string, err error) {
				return us.repo.List{{ $f.Rel.JoinTable.JoinRefField.Name | pascal | plural }}With{{ $f.Rel.JoinTable.JoinField.Name | pascal }}(ctx, {{ $f.Rel.JoinTable.JoinField.Name | camel }}, orderBy, pageSize, pageToken)
			}
		{{- end }}
	{{- end}}
{{- end}}
