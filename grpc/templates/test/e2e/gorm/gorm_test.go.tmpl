package testgorm

import (
	"context"
	"log"
	"net"
	"os"
	"testing"
	"time"

	"github.com/orlangure/gnomock"
	"github.com/stretchr/testify/assert"
	"google.golang.org/grpc"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/grpc/test/bufconn"
	"gorm.io/gorm"

	"{{ .Package }}/database"
	pb "{{ .Package }}/gen/proto/go/{{ .Project }}/v1"
	"{{ .Package }}/repositories"
	repogorm "{{ .Package }}/repositories/gorm"
	"{{ .Package }}/services"
)

const (
	deadlinePerTest                 = time.Duration(5 * time.Second)
	deadlineOnStartContanerForTests = time.Duration(60 * time.Second)
)

var testContainer *gnomock.Container
var client pb.{{ .Project | pascal }}ServiceClient
var svc *services.{{ .Project | pascal }}Service
var repo repositories.Repository
var db *gorm.DB

var err error

func dialer(ctx context.Context) func(context.Context, string) (net.Conn, error) {
	listener := bufconn.Listen(1024 * 1024)

	server := grpc.NewServer()

	pb.Register{{ .Project | pascal }}ServiceServer(server, svc)

	go func() {
		if err := server.Serve(listener); err != nil {
			log.Fatal(err)
		}
	}()

	return func(context.Context, string) (net.Conn, error) {
		return listener.Dial()
	}
}
func TestMain(m *testing.M) {
	os.Exit(testMainWrapper(m))
}

func testMainWrapper(m *testing.M) int {
	ctx, cancelFn := context.WithTimeout(context.Background(), deadlineOnStartContanerForTests)
	defer cancelFn()

	var err error
	testContainer, err = database.RunContainerForTest(ctx, "../../../database/schema.sql")
	if err != nil {
		log.Printf("Failed to create test container: %s", err)
		return 1
	}

	defer func() {
		err = gnomock.Stop(testContainer)
		if err != nil {
			log.Printf("Failed to Stop container: %s", err)
		}
	}()

	db, err = database.ConnectForTest(ctx, testContainer.DefaultAddress())
	if err != nil {
		log.Fatal(err)
	}

	repo = repogorm.New{{ .Project | pascal }}Repository(db)

	svc = services.New{{ .Project | pascal }}Service(repo)

	conn, err := grpc.DialContext(ctx, "", grpc.WithInsecure(), grpc.WithContextDialer(dialer(ctx)))
	if err != nil {
		log.Fatal(err)
	}
	defer conn.Close()

	client = pb.New{{ .Project | pascal }}ServiceClient(conn)

	return m.Run()
}

func truncateTables(t *testing.T) {
	var err error
	{{- range .Tables}}
		err = db.Exec("TRUNCATE TABLE {{ .Name | snake }}").Error
		assert.NoError(t, err)
	{{- end}}

}

func newTest{{ .Project | pascal }}Service(t *testing.T, ctx context.Context) *services.{{ .Project | pascal }}Service {
	db, err := database.ConnectForTest(ctx, testContainer.DefaultAddress())
	assert.NoError(t, err)

	repo := repogorm.New{{ .Project | pascal }}Repository(db)

	svc := services.New{{ .Project | pascal }}Service(repo)

	return svc
}

func assertResponseCodes(t *testing.T, expected error, code codes.Code) {
	err, ok := status.FromError(expected)
	assert.True(t, ok)
	assert.Equal(t, err.Code(), code)

}